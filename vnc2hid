#!/usr/bin/env python3
"""vnc2hid: A VNC server that extracts the HID events

Usage:
    vnc2hid <port> <width> <height> [keyboard] [mouse]
"""

import sys
import selectors
import socket

import collections
import struct
import binascii


class VNCProto():
    def __init__(self):
        self.mouse_x = 0
        self.mouse_y = 0
        self.keys_shift = 0
        self.keys = []

    def read(self, conn):
        """Process incoming bytes."""

        msgtypes = {
            0: 'SetPixelFormat',
            2: 'SetEncodings',
            3: 'FramebufferUpdateRequest',
            4: 'KeyEvent',
            5: 'PointerEvent',
            6: 'ClientCutText',
        }

        buf = conn.recv(1)
        if not buf:
            return None
        msgid = ord(buf)

        if msgid not in msgtypes:
            print("ABORT: Unknown message-type {}".format(msgid))
            # If we dont know the message, we will probably end up with an
            # unsynced protocol stream, so the exception will kill off our
            # connection and force a reconnect.
            raise ValueError

        msgname = msgtypes[msgid]

        # TODO: if verbose, show all packets?
        # print("{} {}".format(msgid, msgname))

        handler = getattr(self, 'recv_'+msgname, None)
        if callable(handler):
            return handler(conn)

        return None

    def sendServerInit(self, conn):
        global width
        global height
        bpp = 32
        depth = 24
        bigendian = False
        truecolor = True
        name = bytes('hid', 'utf8')

        buf = struct.pack(
            '!HHBB??HHHBBBxxxL',
            width, height, bpp, depth, bigendian,
            truecolor,
            255, 255, 255,  # rgb max
            16, 8, 0,       # rgb shift
            len(name)
        )
        buf += name
        conn.send(buf)

    def recv_SetPixelFormat(self, conn):
        conn.recv(19)
        return True

    def recv_SetEncodings(self, conn):
        conn.recv(1)  # padding
        count = int.from_bytes(conn.recv(2), 'big')
        conn.recv(count*4)  # encoding list
        return True

    def recv_FramebufferUpdateRequest(self, conn):
        conn.recv(9)
        return True

    def recv_KeyEvent(self, conn):
        buf = conn.recv(7)
        down, key = struct.unpack("!?xxI", buf)

        keysym_shift = {
            0xffe1: 0x02,   # Shift left
            0xffe2: 0x20,   # Shift right
            0xffe3: 0x01,   # Ctrl left
            0xffe4: 0x10,   # Ctrl right
            0xffeb: 0x08,   # Win Left (Meta)
            0xffec: 0x80,   # Win Right (Meta)
            0xffe9: 0x04,   # Alt left
            0xffea: 0x40,   # Alt right
        }
        if key in keysym_shift:
            # handle shift keys
            if down:
                self.keys_shift |= keysym_shift[key]
            else:
                self.keys_shift &= ~keysym_shift[key]

        else:
            # handle non shift keys

            xlat = {
                ord('!'): 30,
                ord('@'): 31,
                ord('#'): 32,
                ord('$'): 33,
                ord('%'): 34,
                ord('^'): 35,
                ord('&'): 36,
                ord('*'): 37,
                ord('('): 38,
                ord(')'): 39, ord('0'): 39,
                0xff0d: 40,  # Enter
                0xff1b: 41,  # ESC
                0xff08: 42,  # Backspace
                0xff09: 43,  # Tab
                ord(' '): 44,
                ord('-'): 45, ord('_'): 45,
                ord('='): 46, ord('+'): 46,
                ord('['): 47, ord('{'): 47,
                ord(']'): 48, ord('}'): 48,
                ord('\\'): 49, ord('|'): 49,
                # 50?
                ord(';'): 51, ord(':'): 51,
                ord("'"): 52, ord('"'): 52,
                ord('`'): 53, ord('~'): 53,
                ord(','): 54, ord('<'): 54,
                ord('.'): 55, ord('>'): 55,
                ord('/'): 56, ord('?'): 56,
                0xffe5: 57,  # capslock
                0xffbe: 58,  # F1
                0xffbf: 59,  # F2
                0xffc0: 60,  # F3
                0xffc1: 61,  # F4
                0xffc2: 62,  # F5
                0xffc3: 63,  # F6
                0xffc4: 64,  # F7
                0xffc5: 65,  # F8
                0xffc6: 66,  # F9
                0xffc7: 67,  # F10
                0xffc8: 68,  # F11
                0xffc9: 69,  # F12
                0xff61: 70,  # PrScr
                0xff14: 71,  # ScLk
                0xff13: 72,  # Pause
                0xff63: 73,  # Ins
                0xff50: 74,  # Home
                0xff55: 75,  # PgUp
                0xffff: 76,  # Del
                0xff57: 77,  # End
                0xff56: 78,  # PgDn
                0xff53: 79,  # Right
                0xff51: 80,  # Left
                0xff54: 81,  # Down
                0xff52: 82,  # Up
                0xff7f: 83,  # NumLk
                0xffaf: 84,  # KP /
                0xffaa: 85,  # KP *
                0xffad: 86,  # KP -
                0xffab: 87,  # KP +
                0xff8d: 88,  # KP Enter
                0xff9c: 89, 0xffb1: 89,  # KP 1
                0xff99: 90, 0xffb2: 90,  # KP 2
                0xff9b: 91, 0xffb3: 91,  # KP 3
                0xff96: 92, 0xffb4: 92,  # KP 4
                0xff9d: 93, 0xffb5: 93,  # KP 5
                0xff98: 94, 0xffb6: 94,  # KP 6
                0xff95: 95, 0xffb7: 95,  # KP 7
                0xff97: 96, 0xffb8: 96,  # KP 8
                0xff9a: 97, 0xffb9: 97,  # KP 9
                0xff9e: 98, 0xffb0: 98,  # KP 0
                0xff9f: 99, 0xffae: 99,  # KP .
                0xff67: 101,    # Property key right
            }
            if key in xlat:
                usbkey = xlat[key]
            elif key >= ord('A') and key <= ord('Z'):
                usbkey = key - ord('A') + 4
            elif key >= ord('a') and key <= ord('z'):
                usbkey = key - ord('a') + 4
            elif key >= ord('1') and key <= ord('9'):
                usbkey = key - ord('1') + 30
            else:
                usbkey = 3
                print("Unknown")

            if down:
                if usbkey not in self.keys:
                    self.keys.append(usbkey)
            else:
                if usbkey in self.keys:
                    self.keys.remove(usbkey)

        report = struct.pack("Bx6s", self.keys_shift, bytes(self.keys))

        if down:
            downstr = "Down"
        else:
            downstr = "Up  "
        print("Key ({}) {} 0x{:04x}".format(
            binascii.hexlify(report),
            downstr, key, self.keys_shift
        ))

        global hid_key_obj
        if hid_key_obj is not None:
            hid_key_obj.write(report)

        return True

    def recv_PointerEvent_rel(self, conn):
        buf = conn.recv(5)
        buttons, x, y = struct.unpack("!BHH", buf)

        # TODO:
        # - extract wheel events from buttons

        delta_x = x - self.mouse_x
        delta_y = y - self.mouse_y

        overflow = False
        if delta_x > 127:
            overflow = True
            delta_x = 127
        elif delta_x < -128:
            overflow = True
            delta_x = -128

        if delta_y > 127:
            overflow = True
            delta_y = 127
        elif delta_y < -128:
            overflow = True
            delta_y = -128

        self.mouse_x += delta_x
        self.mouse_y += delta_y

        if overflow:
            # The only overflow seen so far appears to be entering/exiting
            # the x2vnc window.  Lets just ignore that one
            delta_x = 0
            delta_y = 0
        report = struct.pack("!Bbb", buttons, delta_x, delta_y)

        print("Mouse ({}) {} {} {}".format(
            binascii.hexlify(report),
            overflow,
            x, y,
        ))

        global hid_mouse_obj
        if hid_mouse_obj is not None:
            hid_mouse_obj.send(report)

        return True

    def recv_PointerEvent(self, conn):
        buf = conn.recv(5)
        buttons, x, y = struct.unpack("!BHH", buf)

        usb_buttons = buttons & 1 | (buttons & 2) << 1 | (buttons & 4) >> 1

        wheel = 0
        if buttons & 0x08:
            wheel = 1
        if buttons & 0x10:
            wheel = -1

        # TODO:
        # - calculate the scaling factor just once

        global width
        global height
        scaled_x = int(32768 / width) * x
        scaled_y = int(32768 / height) * y

        report = struct.pack("<BHHb", usb_buttons, scaled_x, scaled_y, wheel)

        print("Mouse ({}) {} {} {}".format(
            binascii.hexlify(report),
            x, y, buttons
        ))

        global hid_mouse_obj
        if hid_mouse_obj is not None:
            hid_mouse_obj.send(report)

        return True

    def recv_ClientCutText(self, conn):
        conn.recv(3)  # padding
        length = int.from_bytes(conn.recv(4), 'big')
        conn.recv(length)
        return True


vnc = VNCProto()
hid_key_obj = None
hid_mouse_obj = None


class SelectorHandler():
    def __init__(self):
        self.selector = None
        self.socket = None

    def unregister(self):
        if self.selector is not None:
            self.selector.unregister(self.socket)

    def register(self, selector):
        """Add ourselves to the given selector object"""

        if self.socket is None:
            raise ValueError("Need a socket before register")
        if self.selector is not None:
            raise ValueError("Can only register with one selector")

        self.selector = selector
        selector.register(self.socket, selectors.EVENT_READ, self)

    def handle_event(self, events):
        if events & selectors.EVENT_READ:
            self.handle_read()
        if events & selectors.EVENT_WRITE:
            self.handle_write()


class SelectorHandlerListener(SelectorHandler):
    """Open a socket, listen and create new objects for each connection"""

    def __init__(self, host, port, connclass):
        super().__init__()

        sock = socket.socket()
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind((host, port))
        sock.listen(3)
        sock.setblocking(False)
        self.socket = sock

        self.connclass = connclass

    def handle_read(self):
        conn, addr = self.socket.accept()
        self.connclass(self.selector, conn)


class SelectorHandlerConnection(SelectorHandler):
    def __init__(self, selector, socket):
        self.selector = selector
        self.socket = socket
        self.send_q = collections.deque()

    def _events(self):
        """Calculate what event mask to use"""
        events = selectors.EVENT_READ
        if len(self.send_q):
            events |= selectors.EVENT_WRITE
        return events

    def modify(self, data=None):
        """Maybe change the type for this filehandle, set current event mask"""
        if self.selector is None:
            raise ValueError("No selector known")
        if data is None:
            data = self

        self.selector.modify(self.socket, self._events(), data)

    def replace(self, newobject):
        """Allow state machine transition by replacing the object"""
        # TODO:
        # - if any of the classes modify the properties, we are fragile
        newobject.selector = self.selector
        newobject.socket = self.socket
        newobject.send_q = self.send_q

        self.modify(newobject)
        self.selector = None
        self.socket = None
        self.send_q = None

    def handle_write(self):
        if len(self.send_q):
            data = self.send_q.popleft()

            self.socket.sendall(data)
            # TODO:
            # - should switch to send() and requeue partially sent data for
            #   the next writable event.

        # Either way, recalculate our event mask
        self.modify()

    def send(self, data):
        """Enqueue a send buffer and update the event mask"""
        self.send_q.append(data)
        self.modify()


class VNCProtoMain(SelectorHandlerConnection):
    def handle_read(self):
        result = vnc.read(self.socket)
        if not result:
            self.unregister()


class VNCClientInit(SelectorHandlerConnection):
    def handle_read(self):
        # Recv ClientInit
        self.socket.recv(1)
        # we dont care what the sharing state is..

        vnc.sendServerInit(self)

        newstate = VNCProtoMain(self.selector, self.socket)
        self.replace(newstate)


class VNCProto8(SelectorHandlerConnection):
    def handle_read(self):
        # Recv Chosen security type
        got = self.socket.recv(1)
        assert(b"\x01" == got)

        # Send SecurityResult
        self.send(b"\x00\x00\x00\x00")

        newstate = VNCClientInit(self.selector, self.socket)
        self.replace(newstate)


class VNCProtoUnk(SelectorHandlerConnection):
    def __init__(self, selector, socket):
        super().__init__(None, socket)
        self.register(selector)

        version = b"RFB 003.008\n"
        self.send(version)

    def handle_read(self):
        got = self.socket.recv(1024).strip()
        print("Client Version:{}", got)

        if (got == b'RFB 003.008'):
            # Send Security Handshake
            # list of 1 security type, it is 1=="None"
            self.send(b"\x01\x01")

            newstate = VNCProto8(self.selector, self.socket)
            self.replace(newstate)
            return

        # The standard says "if you dont know the proto, it is probably 3.3"

        # protocol 3.3 doesnt require us to wait to listen for any data, so
        # we can complete the auth and move on to normal VNC protocol

        # 1==no authentication
        self.send(b"\x00\x00\x00\x01")

        newstate = VNCClientInit(self.selector, self.socket)
        self.replace(newstate)


class HIDMouseAbs(SelectorHandlerConnection):
    def __init__(self, selector, socket):
        super().__init__(None, socket)

        # We only want to have the last couple of mouse events queued
        self.send_q = collections.deque([], 2)

        self.register(selector)

    def handle_write(self):
        if len(self.send_q):
            data = self.send_q.popleft()

            self.socket.write(data)
            # TODO: we are not nonblocking

        # Either way, recalculate our event mask
        self.modify()

    def send_report(self, data):
        # TODO: move creation of the report packet into this object
        self.send(data)


class HIDKeyboard(SelectorHandlerConnection):
    def __init__(self, selector, socket):
        super().__init__(None, socket)

        self.register(selector)

    def handle_write(self):
        if len(self.send_q):
            data = self.send_q.popleft()

            self.socket.write(data)
            # TODO: we are not nonblocking

        # Either way, recalculate our event mask
        self.modify()

    def handle_read(self):
        got = self.socket.read(1024)
        print("KeyboardReport", got)

    def send_report(self, data):
        # TODO: move creation of the report packet into this object
        self.send(data)


def main():
    if len(sys.argv) < 4:
        print(__doc__)
        return 0

    sys.argv.pop(0)

    # TODO
    # - we should have a global object that handles screen-side details
    # - each client connection should have an object that handles protocol
    #   differences and then just references the screen-side details
    # - the global screen object then should have the width and height..
    global width
    global height

    try:
        port = int(sys.argv.pop(0))
        width = int(sys.argv.pop(0))
        height = int(sys.argv.pop(0))
    except ValueError:
        print("Invalid integer argument")
        return 1

    sel = selectors.DefaultSelector()

    global hid_key_obj

    if len(sys.argv):
        hid_key = sys.argv.pop(0)
        fh = open(hid_key, "r+b", buffering=0)
        hid_key_obj = HIDKeyboard(sel, fh)

    global hid_mouse_obj

    if len(sys.argv):
        hid_mouse = sys.argv.pop(0)
        fh = open(hid_mouse, "r+b", buffering=0)
        hid_mouse_obj = HIDMouseAbs(sel, fh)

    # bind address
    host = ''

    listen = SelectorHandlerListener(host, port, VNCProtoUnk)
    listen.register(sel)

    while True:
        events = sel.select()
        for key, mask in events:
            key.data.handle_event(mask)


if __name__ == "__main__":
    sys.exit(main())
